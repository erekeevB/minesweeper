{"version":3,"sources":["Minesweeper/Minesweeper.module.css","Minesweeper/Minesweeper.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Minesweeper","size","num","setIsSubmit","useState","isFail","setIsFail","isSuccess","setIsSuccess","isUpdate","setIsUpdate","clickNum","useRef","finalGrid","setFinalGrid","useEffect","temp","grid","y","x","push","bomb","isOpen","i","a","Math","floor","random","b","countCloseBombs","res","j","current","recusrionClick","handleClick","map","el","className","s","minesweeper","popup","popup__buttons","onClick","params","rows","index1","index2","open","length","handleFail","zero_element","element","App","fields","setFields","isSubmit","handleSubmit","diff","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19b1c153.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"minesweeper\":\"Minesweeper_minesweeper__29p3g\",\"popup\":\"Minesweeper_popup__1hKIB\",\"popup__buttons\":\"Minesweeper_popup__buttons__2H8aT\",\"rows\":\"Minesweeper_rows__2vRxk\",\"element\":\"Minesweeper_element__2pQnD\",\"bomb\":\"Minesweeper_bomb__2FvRD\",\"zero_element\":\"Minesweeper_zero_element__1XU0w\",\"open\":\"Minesweeper_open__3zUUy\"};","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport s from './Minesweeper.module.css'\r\n\r\nconst Minesweeper = ({size, num, setIsSubmit}) => {\r\n\r\n    let [isFail, setIsFail] = useState(false)\r\n\r\n    let [isSuccess, setIsSuccess] = useState(false)\r\n\r\n    let [isUpdate, setIsUpdate] = useState(false)\r\n\r\n    let clickNum = useRef(0)\r\n\r\n    let [finalGrid, setFinalGrid] = useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n        let temp = []\r\n\r\n        let grid = []\r\n\r\n        for(let y = 0; y < size; y = y + 1){\r\n            for(let x = 0; x < size; x = x + 1){\r\n                temp.push({bomb: 0, isOpen: false})\r\n            }\r\n            grid.push(temp)\r\n            temp = []\r\n        }\r\n    \r\n        for(let i = 0; i < num; i = i + 1){\r\n            let a = Math.floor(Math.random() * Math.floor(size));\r\n            let b = Math.floor(Math.random() * Math.floor(size));\r\n            if(grid[a][b].bomb !== 'bomb'){\r\n                grid[a][b].bomb = 'bomb'\r\n            }else{\r\n                i = i - 1\r\n            }\r\n        }\r\n    \r\n        const countCloseBombs = (y, x) => {\r\n    \r\n            let res = 0;\r\n    \r\n            for(let i = 0; i < 3; i = i + 1){\r\n                for(let j = 0; j < 3; j = j + 1){\r\n                    if(i!==1 || j!==1){\r\n                        if(grid[y-1+i] && grid[y-1+i][x-1+j] && grid[y-1+i][x-1+j].bomb==='bomb'){\r\n                            res = res + 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return res\r\n    \r\n        }\r\n    \r\n        for(let y = 0; y < size; y = y + 1){\r\n            for(let x = 0; x < size; x = x + 1){\r\n                if(grid[y][x].bomb!=='bomb'){\r\n                    grid[y][x].bomb = countCloseBombs(y, x)\r\n                }\r\n            }\r\n        }\r\n\r\n        setFinalGrid(grid)\r\n\r\n        setIsFail(false)\r\n\r\n        setIsUpdate(false)\r\n\r\n        setIsSuccess(false)\r\n\r\n        clickNum.current = 0\r\n\r\n    }, [isUpdate])\r\n    \r\n\r\n    const handleFail = () => {\r\n        let grid = finalGrid.map((el)=>[...el])\r\n        for(let y = 0; y < finalGrid.length; y = y + 1){\r\n            for(let x = 0; x < finalGrid.length; x = x + 1){\r\n                grid[y][x].isOpen = true\r\n            }\r\n        }\r\n        setFinalGrid(grid)\r\n        setIsFail(true)\r\n    }\r\n\r\n    const recusrionClick = (y, x, grid) => {\r\n\r\n        for(let i = -1; i < 2; i = i + 1){\r\n            for(let j = -1; j < 2; j = j + 1){\r\n                if(grid[y+i] && grid[y+i][x+j] && !grid[y+i][x+j].isOpen){\r\n                    if(grid[y+i][x+j].bomb===0){\r\n                        clickNum.current++\r\n                        grid[y+i][x+j].isOpen = true\r\n                        recusrionClick(y+i, x+j, grid)\r\n                    }else if(grid[y+i][x+j].bomb!=='bomb'){\r\n                        clickNum.current++\r\n                        grid[y+i][x+j].isOpen = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClick = (y, x) => {\r\n        let grid = finalGrid.map((el)=>[...el])\r\n\r\n        grid[y][x].isOpen = true\r\n\r\n        clickNum.current = clickNum.current + 1\r\n        \r\n        if(grid[y][x].bomb === 0){\r\n\r\n            recusrionClick(y, x, grid)\r\n\r\n        }\r\n\r\n        if((size*size) - num === clickNum.current){\r\n            setIsSuccess(true)\r\n        }\r\n\r\n        setFinalGrid(grid)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={s.minesweeper}>\r\n            {isFail ? \r\n                <div className={s.popup}>\r\n                    <p>You Lost!</p>\r\n                    <div className={s.popup__buttons}>\r\n                        <button onClick={()=>{setIsUpdate(true)}}>Try Again</button>\r\n                        <button className={s.params} onClick={()=>{setIsSubmit(false)}}>Change Difficulty</button>\r\n                    </div>\r\n                </div>\r\n            : null}\r\n            {isSuccess ? \r\n                <div className={s.popup}>\r\n                    <p>You Won!</p>\r\n                    <div className={s.popup__buttons}>\r\n                        <button onClick={()=>{setIsUpdate(true)}}>New Game</button>\r\n                        <button className={s.params} onClick={()=>{setIsSubmit(false)}}>Change Difficulty</button>\r\n                    </div>\r\n                </div>\r\n            : null}\r\n            {finalGrid.map((rows, index1)=>{\r\n\r\n                return (\r\n                    <div key={index1} className={s.rows}>\r\n                        {rows.map((el, index2)=>{\r\n                            if(el.bomb==='bomb'){\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.open+' '+s.bomb : s.bomb}\r\n                                        onClick={()=>handleFail()}>\r\n                                            X\r\n                                    </div>\r\n                                )\r\n                            }else if(el.bomb === 0){\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.zero_element+' '+s.open : s.element}\r\n                                        onClick={()=>{\r\n                                            if(!el.isOpen){\r\n                                                handleClick(index1, index2)\r\n                                        }}}>\r\n                                            {el.bomb}\r\n                                    </div>\r\n                                )\r\n                            }else {\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.element+' '+s.open : s.element}\r\n                                        onClick={()=>{\r\n                                            if(!el.isOpen){\r\n                                                handleClick(index1, index2)\r\n                                        }}}>\r\n                                            {el.bomb}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            \r\n                        })}\r\n                    </div>\r\n                )\r\n\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Minesweeper;","import { useState } from 'react';\nimport './App.css';\nimport Minesweeper from './Minesweeper/Minesweeper';\n\nfunction App() {\n\n    let [fields, setFields] = useState({})\n\n    let [isSubmit, setIsSubmit] = useState(false)\n\n    const handleSubmit = (diff) => {\n\n        console.log(diff)\n\n        switch(diff){\n            case 'easy':\n                setFields({size: 10, num: 8})\n                break\n            case 'medium':\n                setFields({size: 15, num: 20})\n                break\n            case 'hard':\n                setFields({size: 20, num: 25})\n                break\n        }\n\n        setIsSubmit(true)\n\n    }\n\n    return (\n        <div className=\"App\">\n            {!isSubmit ? \n            <div className='input'>\n                <p>Select Difficulty</p>\n                <button onClick={()=>{handleSubmit('easy')}}>Easy</button>\n                <button onClick={()=>{handleSubmit('medium')}}>Medium</button>\n                <button onClick={()=>{handleSubmit('hard')}}>Hard</button>\n            </div>\n            : \n            <Minesweeper size={fields.size} num={fields.num} setIsSubmit={setIsSubmit} />}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}