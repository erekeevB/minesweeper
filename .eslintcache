[{"C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\reportWebVitals.js":"1","C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\App.js":"2","C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\Minesweeper\\Minesweeper.jsx":"3"},{"size":362,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":246,"mtime":1606248335699,"results":"6","hashOfConfig":"5"},{"size":4738,"mtime":1606251410947,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xbedv1",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\reportWebVitals.js",[],"C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\App.js",[],"C:\\Users\\DELL\\Desktop\\react_projects\\05_minesweeper\\minesweeper\\src\\Minesweeper\\Minesweeper.jsx",["15"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport s from './Minesweeper.module.css'\r\n\r\nconst Minesweeper = ({width, height, coords}) => {\r\n\r\n    let [isFail, setIsFail] = useState(false)\r\n\r\n    let [finalGrid, setFinalGrid] = useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n        let temp = []\r\n\r\n        let grid = []\r\n\r\n        for(let y = 0; y < height; y = y + 1){\r\n            for(let x = 0; x < width; x = x + 1){\r\n                temp.push({bomb: 0, isOpen: false})\r\n            }\r\n            grid.push(temp)\r\n            temp = []\r\n        }\r\n    \r\n        for(let i = 0; i < coords.length; i = i + 1){\r\n            grid[coords[i][0]][coords[i][1]].bomb = 'bomb'\r\n        }\r\n    \r\n        const countCloseBombs = (y, x) => {\r\n    \r\n            let res = 0;\r\n    \r\n            for(let i = 0; i < 3; i = i + 1){\r\n                for(let j = 0; j < 3; j = j + 1){\r\n                    if(i!==1 || j!==1){\r\n                        if(grid[y-1+i] && grid[y-1+i][x-1+j] && grid[y-1+i][x-1+j].bomb==='bomb'){\r\n                            res = res + 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            return res\r\n    \r\n        }\r\n    \r\n        for(let y = 0; y < height; y = y + 1){\r\n            for(let x = 0; x < width; x = x + 1){\r\n                if(grid[y][x].bomb!=='bomb'){\r\n                    grid[y][x].bomb = countCloseBombs(y, x)\r\n                }\r\n            }\r\n        }\r\n\r\n        setFinalGrid(grid)\r\n\r\n    }, [])\r\n    \r\n\r\n    const handleFail = () => {\r\n        setIsFail(true)\r\n    }\r\n\r\n    const handleClick = (y, x) => {\r\n        let grid = []\r\n        if(finalGrid[y][x].bomb === 0){\r\n            for(let i = 0; i < 3; i = i + 1){\r\n                for(let j = 0; j < 3; j = j + 1){\r\n                    if(finalGrid[y-1+i] && finalGrid[y-1+i][x-1+j] && finalGrid[y-1+i][x-1+j].bomb!=='bomb'){\r\n                        grid = finalGrid.map((el)=>[...el])\r\n                        grid[y-1+i][x-1+j].isOpen = true\r\n                        setFinalGrid(grid)\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            grid = finalGrid.map((el)=>[...el])\r\n            grid[y][x].isOpen = true\r\n            setFinalGrid(grid)\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isFail ? <div>You Lost!</div> : null}\r\n            {finalGrid.map((rows, index1)=>{\r\n\r\n                return (\r\n                    <div key={index1} className={s.rows}>\r\n                        {rows.map((el, index2)=>{\r\n                            if(el.bomb==='bomb'){\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.open+' '+s.bomb : s.bomb}\r\n                                        onClick={handleFail}>\r\n                                            <div>Bomb</div>\r\n                                    </div>\r\n                                )\r\n                            }else if(el.bomb === 0){\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.zero_element+' '+s.open : s.element}\r\n                                        onClick={()=>{\r\n                                            if(!el.isOpen){\r\n                                                console.log('AAA')\r\n                                                handleClick(index1, index2)\r\n                                        }}}>\r\n                                            <div>{el.bomb}</div>\r\n                                    </div>\r\n                                )\r\n                            }else {\r\n                                return (\r\n                                    <div \r\n                                        key={index1+'_'+index2} \r\n                                        className={el.isOpen ? s.element+' '+s.open : s.element}\r\n                                        onClick={()=>{\r\n                                            if(!el.isOpen){\r\n                                                console.log('AAA')\r\n                                                handleClick(index1, index2)\r\n                                        }}}>\r\n                                            <div>{el.bomb}</div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                            \r\n                        })}\r\n                    </div>\r\n                )\r\n\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Minesweeper;",{"ruleId":"16","severity":1,"message":"17","line":57,"column":8,"nodeType":"18","endLine":57,"endColumn":10,"suggestions":"19"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coords', 'height', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["20"],{"desc":"21","fix":"22"},"Update the dependencies array to be: [coords, height, width]",{"range":"23","text":"24"},[1489,1491],"[coords, height, width]"]